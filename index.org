#+TITLE: An Introduction to Monoids
#+OPTIONS: toc:1, num:nil, timestamp:nil, \n:t
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js@3.8.0
#+REVEAL_THEME: moon
#+REVEAL_EXTRA_CSS: ./css/monoid.css

* Outline
* Examples

** Example: Shipping Packages
Let's say I have a bunch of packages that need to be shipped.
#+BEGIN_SRC python
packages = [{'destination': '968 East Summit Court New Lenox, IL 60451',
             'description': 'Marbles\n'
                  'weight': 13},
            {'destination': '75 South George Street Muskegon, MI 49441',
             'description': 'Medical supplies\n'
                  'weight': 5},
            {'destination': '238 N. Holly Ave. Tampa, FL 33604',
             'description': 'Frisbees\n'
                  'weight': 4}]
#+END_SRC

** Total Weight

In order to ship I need to calculate their total weight.

#+ATTR_REVEAL: :frag (appear)
#+HEADER: :exports both
#+BEGIN_SRC python :results value pp
totalWeight = 0
for package in packages:
  totalWeight += package['weight']
#+END_SRC

#+RESULTS:

#+ATTR_REVEAL: :frag (appear)
But let's do it a little more functionally:
#+ATTR_REVEAL: :frag (appear)
#+BEGIN_SRC python
weights = [package['weight'] for package in packages]

totalWeight = reduce(operator.add, weights, 0)
#+END_SRC
#+ATTR_REVEAL: :frag (appear)
#+BEGIN_SRC python
# Haskell type signature
# reduce :: (b -> a -> b) -> [a] -> b -> b
#+END_SRC

** Reducing/Folding
[[file:img/Left-fold-transformation.png]]

#+ATTR_REVEAL: :frag (appear)
#+BEGIN_SRC python
weights = [13, 5, 4] # 13 : 5 : 4 : []
#+END_SRC
#+ATTR_REVEAL: :frag (appear)
#+BEGIN_BLOCK
If we replace ~f~ in the diagram with ~add~ and ~z~ with ~0~, we get:
#+BEGIN_SRC python
totalWeight = add(add(add(0, 13), 5), 4)
#+END_SRC
#+END_BLOCK

** Any Over 10?
The shipping company charges extra if our shipment contains any package over 10.
#+BEGIN_SRC python
overTwelve = [weight > 10 for weight in weights]
         # = [True, False, False]
anyOverTwelve = reduce(operator.or, overTwelve, False)
            # = True
#+END_SRC

** All Under 15?
But they give a rebate if all packages are under 10
(just go with it).
#+BEGIN_SRC python
underTen = [weight < 10 for weight in weights]
       # = [False, True, True]
allUnderTen = reduce(operator.and, underTen, True)
          # = False
#+END_SRC

** Construct a Manifest
Let it just be the concatentation of all the package descriptions.
#+BEGIN_SRC python
descriptions = [package['description'] for package in packages]
manifest = reduce(operator.add, descriptions, "")
       # = 'Marbles
       #    Medical Supplies
       #    Frisbees'
#+END_SRC

* See a Pattern?

** Let's Summarize Those Examples

| Objective           | Code                                    |
|---------------------+-----------------------------------------|
| Sum Integers        | reduce(operator.add, listOfInts, 0)     |
| Check if any True   | reduce(operator.or, listOfBools, False) |
| Check if all True   | reduce(operator.and, listOfBools, True) |
| Concatenate Strings | reduce(operator.add, listOfStrings, "") |

* Abstraction
* Conclusion
